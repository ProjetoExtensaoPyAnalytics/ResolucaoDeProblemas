import streamlit as st
import pandas as pd
import plotly.express as px

#agrupar as apresenta√ß√µes de medicamentos em categorias
def agrupar_apresentacao(apresentacao):
    apresentacao = apresentacao.lower()  #converter p minusculas
    if "comprimido" in apresentacao:
        return "Comprimido"
    elif "solu√ß√£o oral" in apresentacao:
        return "Solu√ß√£o Oral"
    elif "suspens√£o oral" in apresentacao:
        return "Suspens√£o Oral"
    elif "xarope" in apresentacao:
        return "Xarope"
    elif "c√°psula" in apresentacao:
        return "C√°psula"
    elif "inje√ß√£o" in apresentacao or "injet√°vel" in apresentacao:
        return "Inje√ß√£o"
    elif "creme" in apresentacao:
        return "Creme"
    elif "gel" in apresentacao:
        return "Gel"
    elif "pomada" in apresentacao:
        return "Pomada"
    elif "lo√ß√£o" in apresentacao:
        return "Lo√ß√£o"
    elif "aerossol" in apresentacao or "inala√ß√£o" in apresentacao:
        return "Aerossol"
    elif "xampu" in apresentacao:
        return "Xampu"
    elif "p√≥ para solu√ß√£o" in apresentacao:
        return "P√≥ para Solu√ß√£o"
    elif "pasta" in apresentacao:
        return "Pasta"
    else:
        return "Outros"

def exibir():
    path = "Planilha-REMUME.xlsx"
    df = pd.read_excel(path)

    #menu para navegar
    st.sidebar.title("Medicamentos em Ararangu√°")
    visualizacao = st.sidebar.radio(
        "Visualiza√ß√µes dispon√≠veis:",
        ["Disponibilidade de Medicamentos", "Apresenta√ß√µes de Medicamentos", "Distribui√ß√£o por Unidade de Sa√∫de", "Classes de Medicamentos"]
    )

    if visualizacao == "Disponibilidade de Medicamentos":
        st.title("Disponibilidade de Medicamentos")
        st.markdown("""<div style="background-color:#D6F3E9; padding:15px; border-radius:8px;">
                        <p style="font-size:14px; color:#555555;">Esta funcionalidade permite verificar se um medicamento espec√≠fico est√° dispon√≠vel na rede de sa√∫de do munic√≠pio. 
                        Ao buscar o medicamento desejado, o sistema retornar√° os locais onde ele pode ser encontrado, proporcionando uma busca r√°pida e facilitada para os cidad√£os.</p>
                        </div>""", unsafe_allow_html=True)

        medicamento_input = st.text_input("Digite o nome do medicamento:")
        #verificar se o medicamento esta presente no dataset
        if medicamento_input:
            normalized_input = medicamento_input.lower()
            filtered_df = df[df['Medicamento'].str.lower().str.contains(normalized_input)]

            if not filtered_df.empty:
                st.success(f"‚úÖ O medicamento '{medicamento_input}' est√° dispon√≠vel.")
                local_de_acesso = filtered_df['Local de acesso'].unique()
                st.write("Dispon√≠vel nos locais:")
                st.markdown(", ".join(f"`{loc}`" for loc in local_de_acesso))
            else:
                st.warning(f"‚ö†Ô∏è O medicamento '{medicamento_input}' n√£o est√° dispon√≠vel.")

#aba de medicamentos por apresentacao
    elif visualizacao == "Apresenta√ß√µes de Medicamentos":
        st.title("Apresenta√ß√µes de Medicamentos")
        st.markdown("""<div style="background-color:#D6F3E9; padding:15px; border-radius:8px;">
                        <p style="font-size:14px; color:#555555;">Esta visualiza√ß√£o mostra as diferentes apresenta√ß√µes dos medicamentos dispon√≠veis na rede de sa√∫de, 
                        agrupadas em categorias como comprimidos, xaropes, inje√ß√µes, entre outras. Compreender a distribui√ß√£o das formas de apresenta√ß√£o auxilia no planejamento e no atendimento √†s necessidades espec√≠ficas dos pacientes.</p>
                        </div>""", unsafe_allow_html=True)

        if not df.empty:
            df['Apresenta√ß√£o Agrupada'] = df['Apresenta√ß√£o'].apply(agrupar_apresentacao)
            presentation_count = df['Apresenta√ß√£o Agrupada'].value_counts()

            presentation_fig = px.bar(
                x=presentation_count.index,
                y=presentation_count.values,
                labels={'x': 'Apresenta√ß√£o Agrupada', 'y': 'Quantidade de Medicamentos'},
                title="Medicamentos por Apresenta√ß√£o Agrupada",
                color=presentation_count.index,
                color_discrete_sequence=px.colors.qualitative.Set2
            )
            st.plotly_chart(presentation_fig)

#aba de distribuicao por US
    elif visualizacao == "Distribui√ß√£o por Unidade de Sa√∫de":
        st.title("Distribui√ß√£o por Unidade de Sa√∫de")
        st.markdown("""<div style="background-color:#D6F3E9; padding:15px; border-radius:8px;">
                        <p style="font-size:14px; color:#555555;">Esta visualiza√ß√£o apresenta o n√∫mero de medicamentos dispon√≠veis em cada unidade de sa√∫de, como Farm√°cia Bom Pastor e UBSs. 
                        A an√°lise desses dados permite uma vis√£o mais clara da oferta de medicamentos por local, ajudando a identificar onde h√° maior ou menor disponibilidade de medicamentos.</p>
                        </div>""", unsafe_allow_html=True)

        if not df.empty:
            farmacia_count = df[df['Local de acesso'].str.contains("Farm√°cia Bom Pastor", case=False, na=False)].shape[0]
            ubs_count = df[df['Local de acesso'].str.contains("UBS", case=False, na=False)].shape[0]

            bar_fig = px.bar(
                x=["Farm√°cia Bom Pastor", "UBS"], 
                y=[farmacia_count, ubs_count],
                labels={'x': 'Unidade de Sa√∫de', 'y': 'Quantidade de Medicamentos'},
                title="N√∫mero de Medicamentos por Unidade de Sa√∫de",
                color=["Farm√°cia Bom Pastor", "UBS"],
                color_discrete_sequence=["lightgreen", "lightblue"]
            )
            st.plotly_chart(bar_fig)

#aba de medicamentos por classe
    elif visualizacao == "Classes de Medicamentos":
        st.title("Distribui√ß√£o por Classe de Medicamentos")
        st.markdown(
            "Esta visualiza√ß√£o exibe a distribui√ß√£o dos medicamentos de acordo com suas classes terap√™uticas. "
            "Essa categoriza√ß√£o facilita a compreens√£o sobre a variedade de medicamentos dispon√≠veis, permitindo identificar quais classes est√£o mais representadas na rede de sa√∫de."
        )
        st.markdown("""
            <div style="background-color:#FFEBCC; padding:10px; border-radius:5px; border: 1px solid #FFA500;">
                <p style="font-size:14px; color:#FFA500; margin: 0;">üí° Para melhor visualiza√ß√£o, clique nas setas √† direita para ver em tela cheia.</p>
            </div>
        """, unsafe_allow_html=True)

        if not df.empty:
            class_distribution = df['Classe'].value_counts()

            pie_fig = px.pie(
                class_distribution, 
                values=class_distribution.values, 
                names=class_distribution.index,
                title="Distribui√ß√£o de Medicamentos por Classe",
                color_discrete_sequence=px.colors.qualitative.Set1
            )
            st.plotly_chart(pie_fig)


    st.markdown("---")
    st.markdown("Dados obtidos a partir do [REMUME](http://saude.ararangua.sc.gov.br:81/site/images/arquivos/REMUME.pdf). Projeto desenvolvido por [PyAnalytics](https://www.linkedin.com/company/pyanalytics/posts/?feedView=all)")
